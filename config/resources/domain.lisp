(in-package :mu-cl-resources)

;; (define-resource person ()
;;   :class (s-prefix "persoon:Person")
;;   :properties `((:name :string ,(s-prefix "foaf:familyName")))
;;   :features '(include-uri)
;;   :resource-base (s-url "http://resource/people/")
;;   :on-path "people")

(define-resource persoon ()
  :class (s-prefix "person:Person")
  :properties `((:achternaam :string ,(s-prefix "foaf:familyName"))
                (:alternatieve-naam :string ,(s-prefix "foaf:name"))
                (:gebruikte-voornaam :string ,(s-prefix "persoon:gebruikteVoornaam")))
  :has-many `((mandataris :via ,(s-prefix "mandaat:isBestuurlijkeAliasVan")
                          :inverse t
                          :as "is-aangesteld-als")
              (kandidatenlijst :via ,(s-prefix "mandaat:heeftKandidaat")
                               :inverse t
                               :as "is-kandidaat-voor")
              (verkiezingsresultaat :via ,(s-prefix "mandaat:isResultaatVan")
                        :inverse t
                        :as "verkiezingsresultaten"))
  :has-one `((geboorte :via ,(s-prefix "persoon:heeftGeboorte")
                       :as "geboorte")
             (identificator :via ,(s-prefix "adms:identifier")
                            :as "identificator")
             (geslacht-code :via ,(s-prefix "persoon:geslacht")
                            :as "geslacht"))
  :resource-base (s-url "http://resource/personen/")
  ;; :features '(include-uri)
  :on-path "personen")

(define-resource mandataris ()
  :class (s-prefix "mandaat:Mandataris")
  :properties `((:rangorde :language-string ,(s-prefix "mandaat:rangorde"))
                (:start :datetime ,(s-prefix "mandaat:start"))
                (:einde :datetime ,(s-prefix "mandaat:einde"))
                (:datum-eedaflegging :datetime ,(s-prefix "ext:datumEedaflegging"))
                (:datum-ministrieel-besluit :datetime ,(s-prefix "ext:datumMinistrieelBesluit"))
                (:generated-from :uri-set ,(s-prefix "ext:generatedFrom"))) ;;if it e.g. comes from gelinkt-notuleren
  :has-many `((rechtsgrond-aanstelling :via ,(s-prefix "mandaat:isAangesteldDoor")
                                       :as "rechtsgronden-aanstelling")
              (rechtsgrond-beeindiging :via ,(s-prefix "mandaat:isOntslagenDoor")
                                       :as "rechtsgronden-beeindiging")
              (mandataris :via ,(s-prefix "mandaat:isTijdelijkVervangenDoor")
                          :as "tijdelijke-vervangingen")
              (beleidsdomein-code :via ,(s-prefix "mandaat:beleidsdomein")
                                  :as "beleidsdomein"))
  :has-one `((mandaat :via ,(s-prefix "org:holds")
                      :as "bekleedt")
             (lidmaatschap :via ,(s-prefix "org:hasMembership")
                           :as "heeft-lidmaatschap")
             (persoon :via ,(s-prefix "mandaat:isBestuurlijkeAliasVan")
                      :as "is-bestuurlijke-alias-van")
             (mandataris-status-code :via ,(s-prefix "mandaat:status")
                                      :as "status"))
  :resource-base (s-url "http://localhost:8080/mandatarissen/")
  :features '(include-uri)
  :on-path "mandatarissen")


(define-resource mandaat ()
  :class (s-prefix "mandaat:Mandaat")
  :properties `((:aantal-houders :number ,(s-prefix "mandaat:aantalHouders")))
  :has-one `((bestuursfunctie-code :via ,(s-prefix "org:role")
                                   :as "bestuursfunctie"))
  :has-many `((bestuursorgaan :via ,(s-prefix "org:hasPost")
                              :inverse t
                              :as "bevat-in"))
  :resource-base (s-url "http://localhost:8080/mandaten/")
  :features '(include-uri)
  :on-path "mandaten")

;; (define-resource contact-punt ()
;;   :class (s-prefix "schema:PostalAddress")
;;   :properties `((:land :string ,(s-prefix "schema:addressCountry"))
;;                 (:gemeente :string ,(s-prefix "schema:addressLocality"))
;;                 (:adres :string ,(s-prefix "schema:streetAddress"))
;;                 (:postcode :string ,(s-prefix "schema:postalCode"))
;;                 (:email :string ,(s-prefix "schema:email"))
;;                 (:telephone :string ,(s-prefix "schema:telephone"))
;;                 (:fax :string ,(s-prefix "schema:faxNumber"))
;;                 (:website :string ,(s-prefix "schema:url")))
;;   :resource-base (s-url "http://resource/contact-punten/")
;;   :features '(include-uri)
;;   :on-path "contact-punten"
;; )

(define-resource contact-punt ()
  :class (s-prefix "schema:ContactPoint")
  :properties `((:aanschrijfprefix :language-string-set ,(s-prefix "vcard:honorific-prefix"))
                (:email :string ,(s-prefix "schema:email"))
                (:fax :string ,(s-prefix "schema:faxNumber"))
                (:naam :string ,(s-prefix "foaf:name"))
                (:website :url ,(s-prefix "foaf:page"))
                (:telefoon :string ,(s-prefix "schema:telephone")))
  :has-one `((adres :via ,(s-prefix "locn:address")
                    :as "adres"))
  :features '(include-uri)
  :resource-base (s-url "http://resource/contact-punten/")
  :on-path "contact-punten")

(define-resource adres ()
  :class (s-prefix "locn:Address")
  :properties `((:busnummer :string ,(s-prefix "adres:Adresvoorstelling.busnummer"))
                (:huisnummer :string ,(s-prefix "adres:AdresVoorstelling.huisnummer"))
                (:straatnaam :string ,(s-prefix "locn:thoroughfare"))
                (:postcode :string ,(s-prefix "locn:postCode"))
                (:gemeentenaam :string ,(s-prefix "adres:gemeentenaam"))
                (:land :language-string-set ,(s-prefix "adres:land"))
                (:locatieaanduiding :string ,(s-prefix "locn:locatorDesignator"))
                (:locatienaam :language-string-set ,(s-prefix "locn:locatorName"))
                (:postbus :string ,(s-prefix "locn:poBox"))
                (:postnaam :string ,(s-prefix "locn:postName"))
                (:volledig-adres :string ,(s-prefix "locn:fullAddress"))
                (:adres-register-id :number ,(s-prefix "lblodlg:adresRegisterId"))
                (:adres-register-uri :url ,(s-prefix "adres:verwijstNaar")))
  :features '(include-uri)
  :resource-base (s-url "http://resource/adressen/")
  :on-path "adressen")

(define-resource account ()
  :class (s-prefix "foaf:OnlineAccount")
  :properties `((:name :string ,(s-prefix "foaf:accountName")))
  :has-one `((person :via ,(s-prefix "foaf:accounts")
                     :inverse t
                     :as "owner"))
  :resource-base (s-url "http://webcat.tmp.semte.ch/accounts/")
  :on-path "accounts")


;; reading in the domain.json
;; (read-domain-file "domain.json")
